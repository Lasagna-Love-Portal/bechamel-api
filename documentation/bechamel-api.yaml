openapi: 3.0.0
info:
  title: Project Ricotta Bechamel API Proposal
  description: >+
    Proposed API - REST API calls and data objects - for the Bechamel API.

    
    The Bechamel API is used by web and mobile clients to support volunteers, requesters and admininstrators
    in the Lasagna Love system.


    The API described here is a **PROPOSAL** and is **NOT YET IMPLEMENTED**.
  version: 0.0.1

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # JSON Web Token
  schemas:
    Attestations:
      description: A list of attestations that a user has made to Lasagana Love, either during their signup process
        or afterwards. Some of these are simple yes/no attestations, some are date-based to track currency.
      type: object
      properties:
        userIsEighteen:
          type: boolean
          description: true indicates user attests they are 18 years of age or older.
            If false, user should not be allowed to make requests, receive requests nor to volunteer.
        userAcceptedEmailCommunications:
          type: boolean
          description: true indicates user grants permission for Lasagna Love to contact the user for the purposes
            of servicing meal or other volunteer requests, and for user account and system purposes.
            If false, user should not be allowed to make requests, receive requests nor to volunteer.
            This permission is only for required communications.
        requesterAcceptedLiabilityRelease:
          type: string
          description: ISO 8601 format date string, in YYYY-MM-DD format, of the date when the user most recently
            accepted the Lasagana Love food donation waiver and release of liability. Not required for users who are not requesters.
            If empty, user's requests should not be matched nor be allowed to be manually matched.
        volunteerAcceptedIndemnityWaiver:
          type: string
          description: ISO 8601 format date string, in YYYY-MM-DD format, of the date when the user most recently
            accepted the Lasagana Love volunteer waiver of indemnity. Not required for users who are not volunteers.
            If empty, user should not be matched to requests nor be allowed to be manually matched.
        volunteerAcceptedVolunteerTerms:
          type: string
          description: ISO 8601 format date string, in YYYY-MM-DD format, of the date when the user most recently
            accepted the Lasagna Love volunteer terms and conditions. Not requred for users who are not volunteers.
            If empty, user should not be matched to requests nor be allowed to be manually matched.
        volunteerCompletedSafetyTraining:
          type: string
          description: ISO 8601 format date string, in YYYY-MM-DD format, of the date when the user most recently
            attested that they viewed the Lasagna Love required food safety video. Not requred for users who are not volunteers.
            If empty, user should not be matched to requests nor be allowed to be manually matched.
    GenderIdentity:
      description: A list of gender identities that volunteers may indicate for their Lasagna Love profile.
      type: string
      enum:
        - female
        - male
        - nonBinary
        - preferNotToSay
      default: "preferNotToSay"
    DietaryRestrictions:
      description: A list of different types of food allergies, dietary restrictions or preferences
        which a requester may indicate the recipient has, and that volunteer chefs may indicate they can accomodate.
      type: array
      items:
        type: string
        description: |
          Array of types of food allergies expressed as string values. These values may include:
          * "vegetarian" - denotes that no meat is to be used for a meal request
          * "vegan" - denotes that no animal products are to be used for a meal request
          * "dairyFree" - denotes that no dairy or lactose-bearing products are to be used for a meal request
          * "glutenFree" - denotes that no gluten-containing products (e.g. wheat, wheat flour) are to be used for a meal request
          * "nutAllergy" - denotes that no tree nuts or peanuts are to be used for a meal request
          * "otherRestrictions" - denotes that there are additional restrictions on a per-request basis to accomodate for meal requests

          This may an empty array. For a request, an empty array denotes that no dietary restrictions were indicated. For a volunteer chef,
          an empty array denotes that the volunteer is not able or comfortable accomodating any dietary restrictions.
        enum:
          - vegetarian
          - vegan
          - dairyFree
          - glutenFree
          - nutAllergy
          - otherRestrictions
    RequesterInfo:
      description: Information pertaining to Lasagna Love requesters
      type: object
      required:
        - adultCount
      properties:
        adultCount:
          type: integer
          description: The number of adults in the requester's household.
          example: 5
        childCount:
          type: integer
          description: The number of children in the requester's household.
          example: 1
        dietaryRestrictions:
          $ref: '#/components/schemas/DietaryRestrictions'
          example: ["vegan"]
    VolunteerInfo:
      description: Information pertaining to Lasagna Love volunteers, whether volunteer chefs or other types of volunteers
      type: object
      required:
        - maxTravelDistance
      properties:
        birthday:
          type: string
          description: An ISO 8601 format date string indicating the volunteer's birthday. This should only include the date,
            in YYYY-MM-DD format.
          example: "1990-01-25"
          default: ""
        genderIdentity:
          $ref: '#/components/schemas/GenderIdentity'
        volunteeringWith:
          type: string
          description: Free-form string indicating organization, group or other people this volunteer is volunteering with.
          example: "Channel U-62"
          default: ""
        employer:
          type: string
          description: The volunteer's employer. Lasagna Love leaders may use this information if provided to reach out
            or assist the volunteer in reaching out to the employer to determine possible volunteer effort or fund matching opportunities.
          default: ""
        facebookName:
          type: string
          description: The volunteer's Facebook profile name.
          default: ""
        maxTravelDistance:
          type: integer
          description: |
            The maximum distance the volunteer is willing to travel to fulfill requests.
            For US-based volunteers, this is expressed in miles from their address to the recipient.
            For Australia and Canada based volunteers, this is expressed in kilometers from their address to the recipient.
            ** NOTE: travel distance is calculated differently based on different regions.** Most regions calculate using
              "as the crow flies" distance. Certain regions use actual driving distance as calcuated by a 3rd party map API.
        allowableDietaryRestrictions:
          $ref: '#/components/schemas/DietaryRestrictions'
          example: ["vegetarian", "nonDairy", "nutAllergy"]
        accomodatesExtraRequests:
          description: true if the volunteer is willing to be contacted for extra requests outside of their indicated schedule,
            false if the volunteer is unwilling.
          type: boolean
          default: false
        showCompletedRequests:
          description: true if the volunteer wishes to see completed and uncompleted requests by default when viewing matches,
            false indicates only uncompleted (open) matches should be shown by default
          type: boolean
          default: false
        availableSchedule:
          type: array
          description: |
            The volunteer's scheduled availability to fulfill requests.
            An empty array indicates no availablity, but it is recommended to pause a volunteer rather than providing an empty
            availableSchedule to indicate lack of availability.

            **This schedule format is VERY LIKELY to change format**
          items:
            type: string
            description: |
              Each string denotes an availability region in the following form "YYYY-MM-DD YYYY-MM-DD \#", where
              * the first part is an ISO 8601 format date string specifying the first day of the availability period
              * the second part is an ISO 8601 format date string specifying the last day, inclusive, of the availability period
              * the third part is a non-negative integer specifying the number of requests that may be fulfilled.
                This may be 0 to indicate no availability though this is not recommended.
                Large requests, for example meal requests for large parties, may be considered as multiple requests by the matching system.
          example: ["2023-04-30 2023-05-06 1", "2023-05-07 2023-05-13 1"]
        attestations:
          $ref: '#/components/schemas/Attestations'
    Profile:
      description: A profile for a user in the Lasagna Love system.
      type: object
      properties:
        ID:
          type: integer
          description: ID for this user. Non-mutable, read-only value.
          readOnly: true
          example: 1234
        type:
          type: array
          items:
            type: string
          description: |
            Array of profile types this user has. Typically this will be one type, either to denote a requester
            or a volunteer chef. This will contain multiple types for local leaders, regional directors and other admininstrators;
            and for users who started out as one type of user (a requester or volunteer) but who subsequently has taken on
            a different role.

            Valid profile type strings -
            * "requester" - denotes a user who is a requester to Lasagna Love for meals or other types or requests.
            * "recipient" - denotes a user who is the intended recipient for a Lasagna Love request. Many users will be both a requester and recipient.
              However, Lasagna Love does let people make requests (nominations) for others, so some users will only be requesters or recipients.
            * "chef" - denotes a user who is volunteer chef for Lasagna Love.
              **Note**: this is intentionally not a general 'volunteer' designation to allow for future differentiation of types of volunteers,
                e.g. volunteers who are willing to provide meals vs. volunteers who are interested in other types of opportunities.
            * "leader" - denotes a user who is a local leader for Lasagna Love. Local leaders coordinate volunteers and requests
              for a given Lasagna Love service area.
            * "director" - denotes a user who is a regional director for Lasagna Love. Regional directors coordinate the volunteers,
              requests and local leaders for multiple Lasagna Love service areas in a region.
            * "admin" - denotes a user who is a Lasagna Love system admininstrator.
            * "superadmin" - denotes a user who is a Lasagna Love system super admininstrator.
            * "service" - denotes a service account. This is a special user type for internal system operations.
          enum:
            - requester
            - recipient
            - chef
            - leader
            - director
            - admin
            - superadmin
            - service
          example: ["chef"]
        username:
          type: string
          description: Username for the user. This is the value to supply to the authentication API to authenticate the user.
          example: UHFStationOwner
        password:
          type: string
          description: Placeholder for this user's password. Write-only for creating or updating users.
            A blank string is returned when retrieving a user profile instead of the user's password.
          example: ""
        email:
          type: string
          description: Email address for this user. This email address will be the address used to communicate with the user,
            to send password reset requests to, and for other Lasagna Love purposes.
          example: georgenewman@example.com
        creationDate:
          type: string
          description: An ISO 8601 format date or date and time string, with the date in extended YYYY-MM-DD format,
            denoting the date this profile was created. Non-mutable, read-only value.
          readOnly: true
        givenName:
          type: string
          description: The given (first) name for a user.
          example: George
        middleOrMaidenName:
          type: string
          description: A user's middle or maiden name. May be empty.
          example: ""
        familyName:
          type: string
          description: The family (last) name for a user.
          example: Newman
        streetAddress:
          type: array
          items:
            type: string
          description: Array of postal address lines. At least one is required for an address.
            Second and subsequent lines are typically used for apartment or unit numbers, floor numbers or other qualifiers.
          example: ["5400 West Edison St.", "1st Floor"]
        city:
          type: string
          description: The city the user resides in
          example: Tulsa
        region:
          type: string
          description: The abbreviated version of the state, province or territory the user resides in.


            United States - this is the two letter abbreviation of the state or area, e.g. DE for Delaware, DC for Washington DC


            Canada - this is the two letter abbreviation of the province, e.g. AB for Alberta


            Australia - this is the three letter abbreviation of the territory, e.g. NSA for New South Wales
          example: OK
        postcode:
          type: string
          description: The postal code the user resides in.


            United States - this is the 5 digit ZIP code or 5+4 digit ZIP+4 code in `#####-####` format


            Canada - this is the 6 letter + digit postal code, without spaces


            Australia - this is 4 digit postal code
          example: 74127
        homePhone:
          type: string
          description: The home phone number for the user. This may include a country code and/or an area code.
          example: "(02) 1234 5678"
          default: ""
        mobilePhone:
          type: string
          description: The mobile phone number for the user. This may include a country code and/or an area code.
          example: "+1 312 555-1212"
          default: ""
        mobileContactPermission:
          type: boolean
          description: When true, the user has provided consent for Lasagna Love to contact the user via text/SMS message at their mobile number
          default: false
          example: true
        newsUpdatesPermission:
          type: boolean
          description: When true, the user has provided consent for Lasagna Love to contact the user via email with news and updates about Lasagna Love
          default: false
          example: true
        active:
          type: boolean
          description: Denotes whether this user is active (true) or inactive (false).
            Inactive users are not allowed to login and are not used for matching.
          default: true
          example: true
        paused:
          type: boolean
          description: Denotes whether this user is eligible for request matching.
            When false - recipients / requesters with requests can have these requests matched; a volunteer is able to be matched to requests
            When true - recipients / requesters will not have their requests matched; a volunteer will not be matched to requests while paused.
          default: false
          example: false
        pausedEndDate:
          type: string
          description: If the paused value for the profile is true, this is a date to indicate when the user may be un-paused. This should be a date string in ISO 8601 extended format, "YYYY-MM-DD"
          default: ""
        requesterInfo:
          description: If this user has made a request to Lasagna Love - e.g. is a past or current requester - this will contain
            information about the user as a requester as collected from the user's request, and as amended / updated periodically
            by subsequent requests from the user.


            An empty object is to be used and expected when a user is not a requester, e.g. the user's type entry does not contain "requester" as a value.
          $ref: '#/components/schemas/RequesterInfo'
        volunteerInfo:
          description: If this user is a volunteer for Lasagna Love, this will contain information about the user as a volunteer
            as collected from the user at the time they signed up to volunteer, and as amended / updated by the user periodically
            via the Lasagna Love portals or applications or in certain cases by local leaders, regional directors or admins.


            An empty object is to be used and expected when a user is not a volunteer, e.g. the user's type entry does not contain "chef" as a value.
          $ref: '#/components/schemas/VolunteerInfo'
          default: { }
      required:
        - type
        - username
        - password
        - email
        - givenName
        - familyName
        - streetAddress
        - region
        - postcode
    ReturnedError:
      description: Error return type for API operations with error information, when an error occurs during an API call
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
            description: Array of one or more strings describing the error or errors encountered processing the request
  responses:
    BadRequest:
      description: Returned when a missing or incomplete request body or URI is provided,
        when one or more required parameters are missing from the provided request body,
        or when invalid parameters are included in the request body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReturnedError'
    Unauthorized:
      description: Access token is missing, invalid or user for supplied token is not authorized to access the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReturnedError'
    NotFound:
      description: The requested resource is not found, or the requesting user is not permitted to access the requested resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReturnedError'
    InternalServerError:
      description: Returned when the API server encounters an unexpected error attempting to process a request.
        Caller may retry the request after an appropriate delay.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReturnedError'

security:
  - bearerAuth: []

paths:
  /login:
    post:
      summary: Authenticates a Lasagna Love user and returns a JSON Web Token (JWT).
      description: Use the returned JWT token in the Authorization header when making Bechamel API calls, as a Bearer token.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        # NOTE: the returned responses from this endpoint are intentionally not the shared API responses.
        '200': # OK
          description: Generated JWT token for the provided username and password
          content:
            application/json:
              schema: 
                type: object
                properties:
                  token:
                    type: string
        '400': # Bad Request
          description: Returned when the supplied JSON message body was missing, incomplete or unparsable
          content:
            application/json:
              schema: 
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        '401': # Unauthorized
          description: Returned when the supplied user credentials are not valid for the system
          content:
            application/json:
              schema: 
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        '500': # Internal Server Error
          description: Returned when the API server encounters an unexpected error
            attempting to generate a JWT token for the user.
            Caller may retry the request after an appropriate delay.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  /profile:
    get:
      summary: Returns the profile for the currently logged in user as defined in the supplied JWT
        Authorization bearer token
      responses:
        '200': # OK
          description: The profile for the user represented by the supplied JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400': # Bad Request
          $ref: '#/components/responses/BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/Unauthorized'
        '500': # Internal Server Error
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add a new user profile to the system
      requestBody:
        description: Information about the new user to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        # The return of the created Profile instead of just a Location header return is intentional here,
        # as many users of the Lasagna Love system will not have sufficient access to request a profile by ID
        '201': # Created
          description: Returns the newly created user profile in the repsonse body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400': # Bad Request
          $ref: '#/components/responses/BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/Unauthorized'
        '500': # Internal Server Error
          $ref: '#/components/responses/InternalServerError'

  /profile/{id}:
    get:
      summary: Returns the profile for the user specified by the supplied ID.
        The logged in user must have sufficient permission to access the requested profile.
      responses:
        '200': # OK
          description: The profile for the user matching the ID provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400': # Bad Request
          $ref: '#/components/responses/BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/Unauthorized'
        '404': # Not found
          $ref: '#/components/responses/NotFound'
        '500': # Internal Server Error
          $ref: '#/components/responses/InternalServerError'

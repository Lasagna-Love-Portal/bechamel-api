openapi: 3.0.0
info:
  title: Project Ricotta Bechamel API Proposal
  description: >+
    Proposed API - REST API calls and data objects - for the Bechamel API.

    
    The Bechamel API is used by web and mobile clients to support volunteers, requesters and admininstrators
    in the Lasagna Love system.


    The API described here is a **PROPOSAL** and is **NOT YET IMPLEMENTED**.
  version: 0.0.3

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # JSON Web Token
  schemas:
    match:
      description: Represents a match between a volunteer and a requester's request.
      type: object
      properties:
        id:
          type: integer
          description: id for this match. Non-mutable, read-only value with no guaranteed semantics.
          readOnly: true
          example: 4787734534
        request_id:
          type: integer
          description: the id of the request that this match pertains to.
          example: 4666333
        requester_id:
          type: integer
          description: |
            The id of the profile for the user who made this request.
            **NOTE**: this is an optimization as this could be retrieved from the request; is it a worthwhile optimization?
          readOnly: true
          example: 1234
        recipient_id:
          type: integer
          description: |
            The id of the profile for the intended recipient of the request.
            **NOTE**: this is an optimization as this could be retrieved from the request; is it a worthwhile optimization?
          readOnly: true
          example: 13466
        volunteer_id:
          type: integer
          description: The id of the volunteer user who has been matched to the request referenced by this match.
          example: 44445
        creation_time:
          type: string
          description: An ISO 8601 simplified extended format date and time string denoting the date and time
            this profile was created. Non-mutable, read-only value.
          readOnly: true
          example: "2021-04-11T07:11:04.332Z"
        last_update_time:
          type: string
          description: An ISO 8601 simplified extended format date and time string denoting the date and time
            this profile was most recently updated. Non-mutable, read-only value.
          readOnly: true
          example: "2022-09-12T11:38:00.000Z"

    profile:
      description: A profile for a user in the Lasagna Love system.
      type: object
      properties:
        id:
          type: integer
          description: id for this user. Non-mutable, read-only value with no guaranteed semantics.
          readOnly: true
          example: 1234
        roles:
          type: array
          items:
            type: string
          description: |
            Array of profile types this user has. Typically this will be one role, either to denote a requester
            or a volunteer chef. This will contain multiple roles for local leaders, regional directors and other admininstrators;
            and for users who started out as one role (a requester or volunteer) but who subsequently has taken on
            a different additional role.

            Valid profile role strings -
            * "requester" - denotes a user who is a requester to Lasagna Love for meals or other types or requests.
            * "recipient" - denotes a user who is the intended recipient for a Lasagna Love request. Many users will be both a requester and recipient.
              However, Lasagna Love does let people make requests (nominations) for others, so some users will only be requesters or recipients.
            * "chef" - denotes a user who is volunteer chef for Lasagna Love.
              **Note**: this is intentionally not a general 'volunteer' designation to allow for future differentiation of types of volunteers,
                e.g. volunteers who are willing to provide meals vs. volunteers who are interested in other types of opportunities.
            * "leader" - denotes a user who is a local leader for Lasagna Love. Local leaders coordinate volunteers and requests
              for a given Lasagna Love service area.
            * "director" - denotes a user who is a regional director for Lasagna Love. Regional directors coordinate the volunteers,
              requests and local leaders for multiple Lasagna Love service areas in a region.
            * "admin" - denotes a user who is a Lasagna Love system admininstrator.
            * "superadmin" - denotes a user who is a Lasagna Love system super admininstrator.
          enum:
            - requester
            - recipient
            - chef
            - leader
            - director
            - admin
            - superadmin
            - service
          example: ["chef"]
        username:
          type: string
          description: Username for the user. This is the value to supply to the authentication API to authenticate the user.
          example: UHFStationOwner
        password:
          type: string
          description: Placeholder for this user's password. Write-only for creating or updating users.
            A blank string is returned when retrieving a user profile instead of the user's password.
          example: ""
        email:
          type: string
          description: Email address for this user. This email address will be the address used to communicate with the user,
            to send password reset requests to, and for other Lasagna Love purposes.
          example: georgenewman@example.com
        email_validated:
          type: boolean
          description: true if the user's email address was successfully validated by the Lasagna Love system, false if not.
            Profiles with unvalidated email addresses should not be involved in request matching and are not eligible to have their requests fulfilled.


            Typically, the Lasagana Love system will update this value for a user's profile when email address validation is successful.
            Users should not be allowed to set this to true interactively. However, a caller should set this to false when a new email address
            is provided by a user for their profile.
          default: false
        creation_time:
          type: string
          description: An ISO 8601 simplified extended format date and time string denoting the date and time
            this profile was created. Non-mutable, read-only value.
          readOnly: true
          example: "2021-04-11T07:11:04.332Z"
        last_update_time:
          type: string
          description: An ISO 8601 simplified extended format date and time string denoting the date and time
            this profile was most recently updated. Non-mutable, read-only value.
          readOnly: true
          example: "2022-09-12T11:38:00.000Z"
        given_name:
          type: string
          description: The given (first) name for a user.
          example: George
        middle_or_maiden_name:
          type: string
          description: A user's middle or maiden name. May be empty.
          example: ""
        family_name:
          type: string
          description: The family (last) name for a user.
          example: Newman
        street_address:
          type: array
          items:
            type: string
          description: Array of postal address lines. At least one is required for an address.
            Second and subsequent lines are typically used for apartment or unit numbers, floor numbers or other qualifiers.
          example: ["5400 West Edison St.", "1st Floor"]
        city:
          type: string
          description: The city the user resides in
          example: Tulsa
        state_or_province:
          type: string
          description: The abbreviated version of the state, province or territory the user resides in.


            United States - this is the two letter abbreviation of the state or area, e.g. DE for Delaware, DC for Washington DC


            Canada - this is the two letter abbreviation of the province, e.g. AB for Alberta


            Australia - this is the three letter abbreviation of the territory, e.g. NSA for New South Wales
          example: OK
        postal_code:
          type: string
          description: The postal code the user resides in.


            United States - this is the 5 digit ZIP code or 5+4 digit ZIP+4 code in `#####-####` format


            Canada - this is the 6 letter + digit postal code, without spaces


            Australia - this is 4 digit postal code
          example: 74127
        home_phone:
          type: string
          description: The home phone number for the user. This may include a country code and/or an area code.
          example: "(02) 1234 5678"
          default: ""
        mobile_phone:
          type: string
          description: The mobile phone number for the user. This may include a country code and/or an area code.
          example: "+1 312 555-1212"
          default: ""
        mobile_contact_permission:
          type: boolean
          description: When true, the user has provided consent for Lasagna Love to contact the user via text/SMS message at their mobile number
          default: false
          example: true
        news_updates_permission:
          type: boolean
          description: When true, the user has provided consent for Lasagna Love to contact the user via email with news and updates about Lasagna Love
          default: false
          example: true
        active:
          type: boolean
          description: Denotes whether this user is active (true) or inactive (false).
            Inactive users are not allowed to login and are not used for matching.
          default: true
          example: true
        paused:
          type: boolean
          description: Denotes whether this user is eligible for request matching.
            When false - recipients / requesters with requests can have these requests matched; a volunteer is able to be matched to requests
            When true - recipients / requesters will not have their requests matched; a volunteer will not be matched to requests while paused.
          default: false
          example: false
        paused_end_date:
          type: string
          description: If the paused value for the profile is true, this is a date to indicate when the user may be un-paused. This should be a date string in ISO 8601 extended format, "YYYY-MM-DD"
          default: ""
        recipient_info:
          description: If this user has made a request to Lasagna Love - e.g. is a past or current requester - this will contain
            information about the user as a recipient as collected from the user's request, and as amended / updated periodically
            by subsequent requests from the user.


            An empty object is to be used and expected when a user is not a requester, e.g. the user's type entry does not contain "requester" as a value.
          $ref: '#/components/schemas/recipient_info'
        volunteer_info:
          description: If this user is a volunteer for Lasagna Love, this will contain information about the user as a volunteer
            as collected from the user at the time they signed up to volunteer, and as amended / updated by the user periodically
            via the Lasagna Love portals or applications or in certain cases by local leaders, regional directors or admins.


            An empty object is to be used and expected when a user is not a volunteer, e.g. the user's type entry does not contain "chef" as a value.
          $ref: '#/components/schemas/volunteer_info'
          default: { }
      required:
        - type
        - username
        - password
        - email
        - given_name
        - family_name
        - street_address
        - region
        - postcode

    request:
      description: A request made by a user to Lasagna Love. Currently these represent meal requests, it's intended the scope of requests
        that Lasagna Love takes on will expand in the future to be more than just meal requests.
      type: object
      properties:
        id:
          type: integer
          description: id for this request. Non-mutable, read-only value with no guaranteed semantics.
          readOnly: true
          example: 104432
        requester_id:
          type: integer
          description: user id of the user making this request.
            For POST requests, this should be supplied if it is different from that of the user making the POST request
        recipient_id:
          type: integer
          description: user id of the user who will receive this request (i.e. meal delivery).
            For POST requests, this should be supplied if it is known and different from that of the user making the POST request.
          default: defaults to the requester_id value that is supplied or filled in by the POST request to make a new request.
        type:
          type: string
          description: Type of request. Currently only "meal" is supported.
          default: "meal"
        stage:
          type: string
          description: |
            The current stage this request is in. Valid values include:

            * ingested: the request has been received by Lasagna Love. Typically this will only be used for requests made on others' behalf.
            * reviewed: the request has had any manual review required carried out. Typically this will only be used for requests made on others' behalf.
            * accepted: the recipient has accepted the request, made an account, accepted any required waivers and performed
              any other required actions. Requests made by a person on their own behalf (not for someone else) will typically start in this stage.
            * backlog: the request has been accepted by Lasagna Love and is in the backlog to be matched to a volunteer.
            * matched: this request has been matched with a volunteer
            * contacted: the volunteer matched to this request has reached out to contact the recipient. The volunteer hasn't necessarily recieved a response.
            * scheduled: the volunteer has scheduled a delivery date with the recipient
            * delivered: the volunteer has delivered the meal request to the recipient's location (or, once supported, performed the pledged volunteer service)
            * no_response: the volunteer has reported the recipient as non-responsive to repeated attempts to communicate via multiple methods
            * no_longer_wanted: this request is no longer desired for fulfillment, or both the volunteer and the local leader responsible for this request
              could not contact the recipient after repeated attempts via multiple methods.
          enum: ["ingested", "reviewed", "accepted", "backlog", "matched", "contacted", "scheduled", "delivered", "no_response", "no_longer_wanted"]
        creation_time:
          type: string
          description: An ISO 8601 simplified extended format date and time string denoting the date and time
            this profile was created. Non-mutable, read-only value.
          readOnly: true
          example: "2021-04-11T07:11:04.332Z"
        last_update_time:
          type: string
          description: An ISO 8601 simplified extended format date and time string denoting the date and time
            this profile was most recently updated. Non-mutable, read-only value.
          readOnly: true
          example: "2022-09-12T11:38:00.000Z"
        notes:
          type: string
          description: |
            Notes provided by the requester when making the request. These may include a thank you, some brief information about the requester, or other information.

            **IMPORTANT** notes may include allergy or dietary restriction information, or other important information for requesters to provide and volunteers to see.
      required:
        - stage

    attestations:
      description: A list of attestations that a user has made to Lasagana Love, either during their signup process
        or afterwards. Some of these are simple yes/no attestations, some are date-based to track currency.
      type: object
      properties:
        user_is_eighteen:
          type: boolean
          description: true indicates user attests they are 18 years of age or older.
            If false, user should not be allowed to make requests, receive requests nor to volunteer.
        user_accepted_email_communications:
          type: boolean
          description: true indicates user grants permission for Lasagna Love to contact the user for the purposes
            of servicing meal or other volunteer requests, and for user account and system purposes.
            If false, user should not be allowed to make requests, receive requests nor to volunteer.
            This permission is only for required communications.
        requester_accepted_liability_release:
          type: string
          description: ISO 8601 simplified extended ISO format date and time string of the date when the user most recently
            accepted the Lasagana Love food donation waiver and release of liability. Not required for users who are not requesters.
            If empty, user's requests should not be matched nor be allowed to be manually matched.
          example: "2021-04-11T07:11:04.332Z"
        volunteer_accepted_indemnity_waiver:
          type: string
          description: ISO 8601 simplified extended ISO format date and time string of the date when the user most recently
            accepted the Lasagana Love volunteer waiver of indemnity. Not required for users who are not volunteers.
            If empty, user should not be matched to requests nor be allowed to be manually matched.
          example: "2021-04-11T07:11:04.332Z"
        volunteer_accepted_volunteer_terms:
          type: string
          description: ISO 8601 simplified extended ISO format date and time string of the date when the user most recently
            accepted the Lasagna Love volunteer terms and conditions. Not requred for users who are not volunteers.
            If empty, user should not be matched to requests nor be allowed to be manually matched.
          example: "2021-04-11T07:11:04.332Z"
        volunteer_completed_safety_training:
          type: string
          description: ISO 8601 simplified extended ISO format date and time string of the date when the user most recently
            attested that they viewed the Lasagna Love required food safety video. Not requred for users who are not volunteers.
            If empty, user should not be matched to requests nor be allowed to be manually matched.
          example: "2021-04-11T07:11:04.332Z"
    dietary_restrictions:
      description: A list of different types of food allergies, dietary restrictions or preferences
        which a requester may indicate the recipient has, and that volunteer chefs may indicate they can accomodate.
      type: array
      items:
        type: string
        description: |
          Array of types of food allergies expressed as string values. These values may include:
          * "vegetarian" - denotes that no meat is to be used for a meal request
          * "vegan" - denotes that no animal products are to be used for a meal request
          * "dairy_free" - denotes that no dairy or lactose-bearing products are to be used for a meal request
          * "gluten_free" - denotes that no gluten-containing products (e.g. wheat, wheat flour) are to be used for a meal request
          * "nut_allergy" - denotes that no tree nuts or peanuts are to be used for a meal request
          * "other_restrictions" - denotes that there are additional restrictions on a per-request basis to accomodate for meal requests

          This may an empty array. For a request, an empty array denotes that no dietary restrictions were indicated. For a volunteer chef,
          an empty array denotes that the volunteer is not able or comfortable accomodating any dietary restrictions.
        enum:
          - vegetarian
          - vegan
          - dairy_free
          - gluten_free
          - nut_allergy
          - other_restrictions
    gender_identity:
      description: A list of gender identities that volunteers may indicate for their Lasagna Love profile.
      type: string
      enum:
        - female
        - male
        - non_binary
        - prefer_not_to_say
      default: "prefer_not_to_say"
    recipient_info:
      description: Information pertaining to Lasagna Love meal request recipients
      type: object
      required:
        - adult_count
      properties:
        adult_count:
          type: integer
          description: The number of adults in the requester's household.
          example: 5
        child_count:
          type: integer
          description: The number of children in the requester's household.
          example: 1
        dietary_restrictions:
          $ref: '#/components/schemas/dietary_restrictions'
          example: ["vegan"]
    returned_error:
      description: Error return type for API operations with error information, when an error occurs during an API call
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
            description: Array of one or more strings describing the error or errors encountered processing the request
    volunteer_info:
      description: Information pertaining to Lasagna Love volunteers, whether volunteer chefs or other types of volunteers
      type: object
      required:
        - max_travel_distance
      properties:
        birthday:
          type: string
          description: An ISO 8601 format date string indicating the volunteer's birthday. This should only include the date,
            in YYYY-MM-DD format.
          example: "1990-01-25"
          default: ""
        gender_identity:
          $ref: '#/components/schemas/gender_identity'
        volunteering_with:
          type: string
          description: Free-form string indicating organization, group or other people this volunteer is volunteering with.
          example: "Channel U-62"
          default: ""
        employer:
          type: string
          description: The volunteer's employer. Lasagna Love leaders may use this information if provided to reach out
            or assist the volunteer in reaching out to the employer to determine possible volunteer effort or fund matching opportunities.
          default: ""
        facebook_name:
          type: string
          description: The volunteer's Facebook profile name.
          default: ""
        max_travel_distance:
          type: integer
          description: |
            The maximum distance the volunteer is willing to travel to fulfill requests.
            For US-based volunteers, this is expressed in miles from their address to the recipient.
            For Australia and Canada based volunteers, this is expressed in kilometers from their address to the recipient.
            ** NOTE: travel distance is calculated differently based on different regions.** Most regions calculate using
              "as the crow flies" distance. Certain regions use actual driving distance as calcuated by a 3rd party map API.
        allowable_dietary_restrictions:
          $ref: '#/components/schemas/dietary_restrictions'
          example: ["vegetarian", "nonDairy", "nut_allergy"]
        accomodates_extra_requests:
          description: true if the volunteer is willing to be contacted for extra requests outside of their indicated schedule,
            false if the volunteer is unwilling.
          type: boolean
          default: false
        show_completed_requests:
          description: true if the volunteer wishes to see completed and uncompleted requests by default when viewing matches,
            false indicates only uncompleted (open) matches should be shown by default
          type: boolean
          default: false
        available_schedule:
          type: array
          description: |
            The volunteer's scheduled availability to fulfill requests.
            An empty array indicates no availablity, but it is recommended to pause a volunteer rather than providing an empty
            available_schedule to indicate lack of availability.

            **This schedule format is VERY LIKELY to change format**
          items:
            type: string
            description: |
              Each string denotes an availability region in the following form "YYYY-MM-DD YYYY-MM-DD \#", where
              * the first part is an ISO 8601 format date string specifying the first day of the availability period
              * the second part is an ISO 8601 format date string specifying the last day, inclusive, of the availability period
              * the third part is a non-negative integer specifying the number of requests that may be fulfilled.
                This may be 0 to indicate no availability though this is not recommended.
                Large requests, for example meal requests for large parties, may be considered as multiple requests by the matching system.
          example: ["2023-04-30 2023-05-06 1", "2023-05-07 2023-05-13 1"]
        attestations:
          $ref: '#/components/schemas/attestations'

  responses:
    bad_request:
      description: Returned when a missing or incomplete request body or URI is provided,
        when one or more required parameters are missing from the provided request body,
        or when invalid parameters are included in the request body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/returned_error'
    unauthorized:
      description: Access token is missing, invalid or user for supplied token is not authorized to access the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/returned_error'
    not_found:
      description: The requested resource is not found, or the requesting user is not permitted to access the requested resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/returned_error'
    internal_server_error:
      description: Returned when the API server encounters an unexpected error attempting to process a request.
        Caller may retry the request after an appropriate delay.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/returned_error'

security:
  - bearerAuth: []

paths:
  /login:
    post:
      summary: Authenticates a Lasagna Love user and returns a JSON Web Token (JWT).
      description: Use the returned JWT token in the Authorization header when making Bechamel API calls, as a Bearer token.
      security: []
      tags:
      - User login and authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - properties:
                    username:
                      type: string
                    password:
                      type: string
                - properties:
                    refresh_token:
                      type: string
      responses:
        # NOTE: the returned responses from this endpoint are intentionally not the shared API responses.
        '200': # ok
          description: Generated JWT token for the provided username and password
          content:
            application/json:
              schema: 
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        '400': # bad request
          description: Returned when the supplied JSON message body was missing, incomplete or unparsable
          content:
            application/json:
              schema: 
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        '401': # unauthorized
          description: Returned when the supplied user credentials are not valid for the system
          content:
            application/json:
              schema: 
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        '500': # internal server error
          description: Returned when the API server encounters an unexpected error
            attempting to generate a JWT token for the user.
            Caller may retry the request after an appropriate delay.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string

  /match:
    post:
      summary: Makes a new match in the Lasagna Love system
      tags:
      - Matches and match-related
      requestBody:
        description: |
          Information about the new match to create.

          The requester_id and recipient_id will be filled in from the request in the request_id and should not be supplied.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/match'
      responses:
        # The return of the created match instead of just a Location header return is intentional here,
        # as many users of the Lasagna Love system will not have sufficient access to request a match by id
        '201': # created
          description: Returns the newly created match in the repsonse body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/match'
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'

  /match/{id}:
    get:
      summary: Returns the match specified by the supplied id.
        The logged in user must have sufficient permission to access the requested match
      tags:
      - Matches and match-related
      responses:
        '200': # ok
          description: The match with the id specified in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/match'
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '404': # not found
          $ref: '#/components/responses/not_found'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'
    patch:
      summary: Updates the match's specified fields with the values specified in the provided JSON body
      description: |
        Updates the match with the id specified, changing every specified field in the provided JSON body to the value provided.

        Do **NOT** specify null or empty values unless intending to remove the value for a field.
        **id, creation_time, last_update_time, recipient_id, and requester_id values cannot be changed. A request specifying one of these fields will be rejected.**
      tags:
      - Matches and match-related
      requestBody:
        description: |
          The match updates to apply. These should be specified in JSON as a collection of key and value pairs -
          each representing a field name to change and the new value to apply.

          Values listed in the match schema as required are not required for PATCH requests - **ONLY** fields
          to update should be provided.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/match'
            example:
              { "volunteer_id" : 45678 }
      responses:
        '204': # no content
          description: match was successfully updated.
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'

  /matches:
    get:
      summary: Returns an array of open matches for the currently logged in user, or an array of open matches from a query string
      description: By default, returns an array of 0 or more Matches containing the open matches
        for the user specified in the supplied JWT Authorization bearer token.
        When query parameters are used, returns an array of 0 or more Matches from the collection of Matches
        accessible to the user specified in the supplied JWT token and modified by the supplied parameters.
      tags:
      - Matches and match-related
      parameters:
        - in: query
          name: scope
          required: false
          schema:
            type: string
            description: specifies the search scope for Matches to return. Will return all the Matches that are visible to the requesting user
              in the specified scope. When "all" is specified, returns all Matches that the user can access.
              For example, a local leader specifying scope=all will receive all Matches for Requests in their assigned districts,
              and a regional director specifying scope=all will receive all Matches for Requests in their Super Region.
              If this parameter is not specified, then only the current user's matches will be returned.
            enum: ["user", "district", "region", "all"]
        - in: query
          name: status
          required: false
          schema:
            type: string
            description: |
              The status of the Matches to return, as designated and simplified from the request in the match -
              or Matches of all statuses if "all" is specified. Multiple values may be specified, separated by commas.
              Valid values are:

              * open: matches that have been made but have not yet been delivered by a volunteer.
                Matches with requests of status "matched", "contacted", or "scheduled"
              * delivered: matches with requests of status "delivered"
              * stalled: matches with requests of status "no_response"
              * cancelled: matches with requests of status "noLongerWants"
              * all: matches with Requests containing any status
            enum: ["open", "delivered", "cancelled", "all"]
      responses:
        '200': # ok
          description: Array of open matches for the user represented by the supplied JWT token, or as specified by the query parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/match'
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '404': # not found
          $ref: '#/components/responses/not_found'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'

  /profile:
    get:
      summary: Returns the profile for the currently logged in user, or an array of profiles from a query string
      description: By default, returns the profile for the user specified in the supplied JWT Authorization bearer token.
        When query parameters are used, returns an array of 0 or more profiles from the collection of profiles
        accessible to the user specified in the supplied JWT token and modified by the supplied parameters.
      tags:
      - User (requester, volunteer and administrator) profiles
      parameters:
        - in: query
          name: type
          required: false
          schema:
            type: string
            description: the types of profiles to return. Will return all the profiles of the given type that are visible to the requesting user
              of the specified type - or all types if "all" is specified.
              For example, a local leader specifying type=all will receive all profiles for all users in their assigned districts.
              If this parameter is not specified, then only the current user's profile will be returned.
            enum: ["recipient", "requester", "chef", "leader", "director", "admin", "superadmin", "service", "all"]
        - in: query
          name: active
          required: false
          schema:
            type: string
            description: controls whether to return all eligible profiles (default), only active or only inactive profiles.
              For example, a regional director specifying active=inactive will receive all profiles for all users in their Super Region,
              who are inactive and that fit the type specifier provided in the query string.
            enum: ["active", "inactive", "all"]
      responses:
        '200': # ok
          description: The profile for the user represented by the supplied JWT token, or array of profiles specified by the query parameters.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/profile'
                  - type: array
                    items:
                      $ref: '#/components/schemas/profile'
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '404': # not found
          $ref: '#/components/responses/not_found'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'
    patch:
      summary: Updates the current user's specified profile fields with the values specified in the provided JSON body
      description: |
        Updates the profile for the user specified by the provided JWT token, changing every specified field
        in the provided JSON body to the value provided.

        For embedded JSON objects, only the fields to update in those objects should be specified.
        *Example:* once a user watches the food safety training video, their profile can be updated to reflect this by
          providing the updated volunteer_info.attestations.volunteer_completed_safety_training field and value only.

        Do **NOT** specify null or empty values unless intending to remove the value for a field.
        **id, creation_time and last_update_time values cannot be changed. A request specifying one of these fields will be rejected.**
      tags:
      - User (requester, volunteer and administrator) profiles
      requestBody:
        description: |
          The profile updates to apply to the current user profile. These should be specified in JSON
          as a collection of key and value pairs - each representing a field name to change and the new value to apply.

          Values listed in the profile schema as required are not required for PATCH requests - **ONLY** fields
          to update should be provided.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profile'
            example:
              { "password" : "new password",
                "volunteer_info" : {
                  "attestations" : {
                    "volunteer_completed_safety_training" : "2023-05-01"
                  }
                }
              }
      responses:
        '204': # no content
          description: User profile was successfully updated.
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'
    post:
      summary: Add a new user profile to the system
      tags:
      - User (requester, volunteer and administrator) profiles
      requestBody:
        description: Information about the new user to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profile'
            example:
              type: ["chef"]
              username: UHFStationOwner
              password: PasswordForTheUser
              email: georgenewman@example.com
              email_validated: false
              given_name: George
              family_name: Newman
              street_address: [
                "5400 West Edison St.",
                "1st Floor"
              ]
              city: Tulsa
              region: OK
              postcode: 74127
              home_phone: (02) 1234 5678
              mobile_phone: +1 312 555-1212
              mobile_contact_permission: true
              news_updates_permission: true
              active: true
              paused: false
              volunteer_info:
                birthday: 1990-01-25
                gender_identity: prefer_not_to_say
                max_travel_distance: 10
                allowable_dietary_restrictions: ["vegetarian"]
                accomodates_extra_requests: false
                show_completed_requests: false
                available_schedule: [
                  "2023-04-30 2023-05-06 1",
                  "2023-05-07 2023-05-13 1"
                ]
              attestations:
                user_is_eighteen: true
                user_accepted_email_communications: true
                volunteer_accepted_indemnity_waiver: 2021-04-11T07:11:04.332Z
                volunteer_accepted_volunteer_terms: 2021-04-11T07:11:04.332Z
                volunteer_completed_safety_training: 2021-04-11T07:11:04.332Z
      responses:
        # The return of the created profile instead of just a Location header return is intentional here,
        # as many users of the Lasagna Love system will not have sufficient access to request a profile by id
        '201': # created
          description: Returns the newly created user profile in the repsonse body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profile'
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'
    put:
      summary: Updates the current user profile so that it now contains the information in the specified profile body.
      description: |
        Updates the profile for the user specified by the provided JWT token, changing all mutable non-password values
        to the values provided. Returns the updated user profile.

        **Passwords cannot be changed with this method and will be ignored if specified. The PATCH method must be used to change passwords.**
        **id and creation_time and last_update_time values cannot be changed and will be ignored if speficied.**
      tags:
      - User (requester, volunteer and administrator) profiles
      requestBody:
        description: The updated profile to apply to this user.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profile'
      responses:
        '200': # ok
          description: Returns the updated user profile in the repsonse body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profile'
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'

  /profile/{id}:
    get:
      summary: Returns the profile for the user specified by the supplied id.
        The logged in user must have sufficient permission to access the requested profile.
      tags:
      - User (requester, volunteer and administrator) profiles
      responses:
        '200': # ok
          description: The profile for the user matching the id provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profile'
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '404': # not found
          $ref: '#/components/responses/not_found'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'
    patch:
      summary: Updates the profile for the user specified by the supplied id with the values specified in the provided JSON body.
        The logged in user must have sufficient permission to update the requested profile.
      description: |
        Updates the profile for the user specified by the provided id, changing every specified field
        in the provided JSON body to the value provided.

        For embedded JSON objects, only the fields to update in those objects should be specified.
        *Example:* to change a volunteer user's profile to indicate they've watched the food safety training,
          provide the updated volunteer_info.attestations.volunteer_completed_safety_training value key and value only.

        Do **NOT** specify null or empty values unless intending to remove the value for a field.
        **id, creation_time and last_update_time values cannot be changed. A request specifying one of these fields will be rejected.**
      tags:
      - User (requester, volunteer and administrator) profiles
      requestBody:
        description: |
          The profile updates to apply to the current user profile. These should be specified in JSON
          as a collection of key and value pairs - each representing a field name to change and the new value to apply.

          Values listed in the profile schema as required are not required for PATCH requests - **ONLY** fields
          to update should be provided.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profile'
            example:
              { "password" : "new password",
                "volunteer_info" : {
                  "attestations" : {
                    "volunteer_completed_safety_training" : "2023-05-01"
                  }
                }
              }
      responses:
        '204': # no content
          description: User profile was successfully updated.
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '404': # not found
          $ref: '#/components/responses/not_found'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'
    put:
      summary: Updates the profile for the user specified by the supplied id.
        The logged in user must have sufficient permission to update the requested profile.
      description: |
        Updates the profile for the user specified by the provided id, changing all mutable non-password values
        to the values provided. Returns the updated user profile.

        **Passwords cannot be changed with this method and will be ignored if specified. The PATCH method must be used to change passwords.**
        **id, creation_time and last_update_time values cannot be changed and will be ignored if speficied.**
      tags:
      - User (requester, volunteer and administrator) profiles
      requestBody:
        description: The updated profile to apply to this user.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profile'
            example:
              type: ["recipient"]
              username: UHFStationOwner
              password: PasswordForTheUser
              email: georgenewman@example.com
              email_validated: false
              given_name: George
              family_name: Newman
              street_address: [
                "5400 West Edison St.",
                "1st Floor"
              ]
              city: Tulsa
              region: OK
              postcode: 74127
              home_phone: (02) 1234 5678
              mobile_phone: +1 312 555-1212
              mobile_contact_permission: true
              news_updates_permission: true
              active: true
              paused: false
              recipient_info:
                adult_count: 3
                child_count: 1
              attestations:
                user_is_eighteen: true
                user_accepted_email_communications: true
                volunteer_accepted_indemnity_waiver: 2021-04-11T07:11:04.332Z
                volunteer_accepted_volunteer_terms: 2021-04-11T07:11:04.332Z
                volunteer_completed_safety_training: 2021-04-11T07:11:04.332Z
      responses:
        '200': # ok
          description: Returns the updated user profile in the repsonse body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profile'
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '404': # not found
          $ref: '#/components/responses/not_found'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'

  /request:
    get:
      summary: Returns the most recent active request made by the currently logged in user,
        or an array of requests representing all the requests made by the currently logged in user.
      description: By default, returns the most recent active (non-fulfilled, non-cancelled) request made by the user
        specified by the provided JWT login token. Since users can only have one open and active request at present,
        this should represent all open requests in the default state.
        When query parameters are used, returns an array of 0 or more requests from the collection of requests
        accessible to the user specified in the supplied JWT token and modified by the supplied parameters.
      tags:
      - Meal requests
      parameters:
        - in: query
          name: scope
          required: false
          schema:
            type: string
            description: specifies the search scope for requests to return. Will return all the Requests that are visible to the requesting user
              in the specified scope. When "all" is specified, returns all Requests that the user can access.
              For example, a local leader specifying scope=all will receive all profiles for all users in their assigned districts,
              and a regional director specifying scope=all will receive all Requests in their Super Region.
              If this parameter is not specified, then only the current user's profile will be returned.
            enum: ["user", "district", "region", "all"]
        - in: query
          name: stage
          required: false
          schema:
            type: string
            description: controls whether to return all Requests (default); or Requests in one or more stages.
              Multiple stages can be specified in the stage parameter separated by commas.
              For example, a regional director specifying stage=ingested,reviewed,accepted,backlog will receive all Requests
              that have not yet been matched to any volunteer, in the scope of the 'scope' query parameter specified.
            enum: ["ingested", "reviewed", "accepted", "backlog", "matched", "contacted", "scheduled", "delivered", "no_response", "no_longer_wanted", "all"]
        - in: query
          name: user_id
          required: false
          schema:
            type: integer
            description: specifies one or more users to return Requests for, narrowed by any other query parameters provided.
              Multiple user_id values can be specified in the user_id query parameter separated by commas.
            example: user_id=1143
      responses:
        '200': # ok
          description: The most recent request created by the user represented by the supplied JWT token, or array of Requests specified by the query parameters.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/request'
                  - type: array
                    items:
                      $ref: '#/components/schemas/request'
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '404': # not found
          $ref: '#/components/responses/not_found'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'
    patch:
      summary: Updates the most recent active request made by the currently logged in user with the values specified in the provided JSON body
      description: |
        Updates the most recent active request for the user specified by the provided JWT token, changing every specified field
        in the provided JSON body to the value provided.

        Do **NOT** specify null or empty values unless intending to remove the value for a field.
        **id, creation_time and last_update_time values cannot be changed. A request specifying one of these fields will be rejected.**
      tags:
      - Meal requests
      requestBody:
        description: |
          The updates to apply to the most recent active request made by the user specified by the provided JWT login.
          These should be specified in JSON as a collection of key and value pairs - each representing a field name to change and the new value to apply.

          Values listed in the request schema as required are not required for PATCH requests - **ONLY** fields to update should be provided.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request'
            example: |
              This example allows a user to indicate they no longer want their most recently made meal request -
              { "password" : "new password",
                "volunteer_info" : {
                  "attestations" : {
                    "volunteer_completed_safety_training" : "2023-05-01"
                  }
                }
              }
      responses:
        '204': # no content
          description: Most recent active request for the user was successfully updated.
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'
    post:
      summary: Creates a new request for the currently logged in user.
      tags:
      - Meal requests
      requestBody:
        description: Information about the new request to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request'
      responses:
        # The return of the created request instead of just a Location header return is intentional here,
        # as many users of the Lasagna Love system may not have sufficient access to access a request by id
        '201': # created
          description: Returns the newly created request in the repsonse body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/request'
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'
    put:
      summary: Updates the most recent active request made by the currently logged in user, so that it now contains the information in the specified profile body.
      description: |
        Updates the most recent active request for the user specified by the provided JWT token, changing all mutable values
        to the values provided. Returns the updated request.

        **id, creation_time and last_update_time values cannot be changed and will be ignored if speficied.**
      tags:
      - Meal requests
      requestBody:
        description: The updated request in its full state.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request'
      responses:
        '200': # ok
          description: Returns the updated request in full.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/request'
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'

  /request/{id}:
    get:
      summary: Returns the request specified by the supplied id. The logged in user must have sufficient permission to access the specified request.
      tags:
      - Meal requests
      responses:
        '200': # ok
          description: The request matching the id provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/request'
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '404': # not found
          $ref: '#/components/responses/not_found'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'
    patch:
      summary: Updates the request specified by the supplied id with the values specified in the provided JSON body.
        The logged in user must have sufficient permission to update the specified request.
      description: |
        Updates the request specified by the provided id, changing every specified field in the provided JSON body to the value provided.

        Do **NOT** specify null or empty values unless intending to remove the value for a field.
        **id, creation_time, and last_update_time values cannot be changed. A request specifying one of these fields will be rejected.**
      tags:
      - Meal requests
      requestBody:
        description: |
          The profile updates to apply to the specified request. These should be specified in JSON
          as a collection of key and value pairs - each representing a field name to change and the new value to apply.

          Values listed in the request schema as required are not required for PATCH requests - **ONLY** fields
          to update should be provided.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request'
            example:
              { "stage" : "matched" }
      responses:
        '204': # no content
          description: request was successfully updated.
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '404': # not found
          $ref: '#/components/responses/not_found'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'
    put:
      summary: Updates the request specified by the supplied id.
        The logged in user must have sufficient permission to update the specified request.
      description: |
        Updates the request specified by the provided id, changing all mutable values to the values provided. Returns the updated request.

        **id, creation_time and last_update_time values cannot be changed and will be ignored if speficied.**
      tags:
      - Meal requests
      requestBody:
        description: The updated request in full.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request'
      responses:
        '200': # ok
          description: Returns the updated request in the repsonse body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/request'
        '400': # bad request
          $ref: '#/components/responses/bad_request'
        '401': # unauthorized
          $ref: '#/components/responses/unauthorized'
        '404': # not found
          $ref: '#/components/responses/not_found'
        '500': # internal server error
          $ref: '#/components/responses/internal_server_error'
